" Vundle {{{
set nocompatible " use Vim settings instead of Vi 
filetype off     " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim

" for fish users
set shell=/bin/bash

call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" syntax highlighter
Plugin 'scrooloose/syntastic'

" Plugin 'nvie/vim-flake8'
Plugin 'rust-lang/rust.vim'

" Plugin 'majutsushi/tagbar'
" Colorscheme
Plugin 'jnurmine/Zenburn'

" Swap windows
Plugin 'wesQ3/vim-windowswap'

" NERDTree
Plugin 'preservim/nerdtree'

" FZF
Plugin 'junegunn/fzf.vim'

" Powerline
Plugin 'vim-airline/vim-airline'

" Nginx
Plugin 'chr4/nginx.vim'

" Docker
Plugin 'ekalinin/Dockerfile.vim'

" Comments
Plugin 'preservim/nerdcommenter'

call vundle#end()            " required
filetype plugin indent on    " required
" }}}

" General config {{{
set history=1000 " bigger history for executed commands
set showcmd " show the last command in the bottom right corner
set autoread " automatically reread files if unmodified inside of Vim
set backspace=indent,eol,start " make backspace great again
set clipboard=unnamedplus,unnamed
set modelines=1 " check the final line of the file for a modeline, used to configure vim on per file basis
set ttyfast " speed up scrolling in Vim

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" }}}

" Interface {{{
" colorscheme desert " colorscheme installed in ~/.vimrc
" taken from https://github.com/rainglow/vim
" colorscheme gloom
colorscheme zenburn
" Create a highlight group for extra white spaces
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
set colorcolumn=80,120 " two rulers at 80 and 120
set ruler " enable ruler
set cursorline " highlight current line
set number " set line numbers
set relativenumber " how far is the line from current one
set mouse=a " enables 

set wildmenu " display commands tab-completion as a menu, for example when you look for a file
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif
" }}}

" Backups {{{
" turn backup off
set nobackup
set nowb
set directory=$HOME/.vim/swp// " set swp folder
set undodir=$HOME/.vim/undo// " set undo folder
" }}}

" Indentation {{{
" filetype indent on " load indent file when recognizing ft
set autoindent " new lines inherit indent of previous lines
set tabstop=2 " number of visual spaces per TAB
set softtabstop=2 " number of spaces in tab when editing
set shiftwidth=2 " '>' indents with 4 spaces
set expandtab  " insert spaces when pressing tabs
" }}}

" Folding {{{
set foldenable " enable folding
set foldlevelstart=10 " open most folds by default
set foldnestmax=10 " no more than 10 nested folds
set foldmethod=indent " fold based on indent level
" }}}

" Search {{{
set incsearch " search as characters are entered
set hlsearch " highlight matches
set ignorecase " if you search in all-lowercase, your search will be case-insensitive
set smartcase " if you have at least one upper-case letter, your search will be case-sensitive
" }}}

" Text rendering {{{
syntax on " enable syntax processing
set scrolloff=3 " always be 3 lines away from the top or the bottom of the screen when scrolling
set sidescrolloff=5 " always be 5 columns away from the sides of the screen
set linebreak " break lines between words when wrapping
set showmatch " highlight matching [{()}]

:au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
:au InsertLeave * match ExtraWhitespace /\s\+$/
" }}}

" Mappings {{{
" move vertically by visual line, it helps when line is wrapped
nnoremap j gj
nnoremap k gk

" move to beginning/end of line with sematic B and E
nnoremap B ^
nnoremap E $
" $/^ doesn't do anything
nnoremap $ <nop>
nnoremap ^ <nop>

" toggle folds
nnoremap <space> za

" don't tap shift to insert a command
nnoremap ; :

" Open file with FZF search
nnoremap <C-p> :FZF<CR>

" Open home file with FZF search
nnoremap <C-t> :FZF ~<CR>

" go to previous buffer
" nnoremap <C-j> :bprev<CR>
" go to next buffer
" nnoremap <C-k> :bnext<CR>
" }}}

" Leader Mappings {{{
let mapleader = ","

" select last pasted text
nnoremap <leader>v `[V`]

" fast saving a buffer
nmap <leader>w :w!<cr>

" Substitute all occurences of a word under cursor
nnoremap <Leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>

" run python files
" autocmd FileType python map <buffer> <Leader>r :w<CR>:exec '!python3' shellescape(@%, 1) < input <CR>
" autocmd FileType python imap <buffer> <Leader>r <esc>:w<CR>:exec '!python3' shellescape(@%, 1) < input <CR>
autocmd FileType python nnoremap <Leader>r :call RunPython()<CR>

" Run Rust files
autocmd FileType rust nnoremap <Leader>r :RustRun<CR>

" copy all to clipboard
nnoremap <Leader>c :w<CR>:%y*<CR>

map <Leader>b :NERDTreeToggle<CR>

" Circle between 2 last opened buffers
nnoremap <Leader><tab> :b#<CR>

" Rg word under cursor and pipe results to FZF
nnoremap <silent> <Leader>rg :Rg <C-R><C-W><CR>

" Search with RG and pipe results to FZF
nnoremap <silent> <Leader>f :Rg a<C-H>

" Buffers in FZF
nnoremap <silent> <Leader>e :Buffers<CR>

" Command history in FZF
nnoremap <silent> <Leader>h :History:<CR>

" Close all buffers
map <silent> <Leader>q :qall<CR>

" }}}

" Plugins configuration {{{
" filetype plugin on " load plugin file when recognizing ft
autocmd FileType python setlocal commentstring=#\ %s

" run Rust formatter on save
let g:rustfmt_autosave = 1

" Python syntax checker
autocmd BufRead,BufNewFile *.py let python_highlight_all=1
" }}}

" Syntastic {{{
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Setup Rust checkers, set cargo for cargo projects
let g:syntastic_rust_checkers = ['rustc']
let g:syntastic_python_python_exec = 'python3'
let g:syntastic_python_checkers = ['python']
" }}}

" NERDTree {{{
" Show dotfiles
let NERDTreeShowHidden=1

" Close vim when last window is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Open NERDTree when open a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
" Open NERDTree when open vim w/out anything
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" If more than one window and previous buffer was NERDTree, go back to it.
autocmd BufEnter * if bufname('#') =~# "^NERD_tree_" && winnr('$') > 1 | b# | endif
" }}}

" FZF {{{
" If installed using Homebrew
set rtp+=/usr/local/opt/fzf
" }}}

" Airline {{{
let g:airline#extensions#tabline#enabled = 1
" }}}

" Custom functions {{{
function! RunPython()
    let s:current_file = expand("%")
    enew|silent execute ".!python3 " . shellescape(s:current_file, 1) . "< input"
    setlocal buftype=nofile bufhidden=wipe noswapfile nowrap
    setlocal nobuflisted
endfunction
" }}}

" {{{ Autocmd
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
" }}}

"""""""""""""""" TODO

let g:netrw_browse_split=4 " mode of netrw
let g:netrw_winsize=20 " netrw window high

set nospell " enable spell checking
autocmd BufNewFile,BufRead config set nospell

" ======= Others 
set undofile " persist undo between vim sessions by saving an undofile <FILENAME>.un~

au FocusLost * :wa " autosave on losing focus

" turn off search highlight by Ctrl-L
nnoremap <silent> <leader> :nohlsearch<CR> 

" Plugins
" FIXME
" :set runtimepath^=~/.vim/plugins/vim-ripgrep

" ======= REMAPPINGS

" move between windows
nnoremap <C-H> <C-W><C-H>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>

" save file opened w/out sudo
cnoremap w!! execute 'silent! write !sudo tee % > /dev/null' <bar> edit!


" source vimrc
nnoremap <leader>sv :source $MYVIMRC<return>
" use tab to move between bracket pairs
nnoremap <tab> %
vnoremap <tab> %


" vim:foldmethod=marker:foldlevel=0
